Think Python

http://thinkpython.com

http://docs.python.org

IDE: PySide


开头：
#!/usr/bin/env python

--------------------------------------------------------------------------------

Python is considered an interpreted language because Python programs are
executed by an interpreter.

There are two ways to use the interpreter: interactive mode and script mode.
In interactive mode, you type Python programs and the interpreter displays
the result.

In Linux console, just type:
$ python
Python 2.7.5 (default, Nov 12 2013, 16:18:42) 
[GCC 4.8.2 20131017 (Red Hat 4.8.2-1)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> 

or

$ python3
Python 3.3.2 (default, Nov  8 2013, 13:38:57) 
[GCC 4.8.2 20131017 (Red Hat 4.8.2-1)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>

Type exit() to exit.


Alternatively, you can store code in a file and use the interpreter to execute
the contents of the file, which is called a script. And in Linux, type:
$ python hello.py

--------------------------------------------------------------------------------

Three kinds of errors can occur in a program:
syntax errors, runtime errors, and semantic errors.

--------------------------------------------------------------------------------

Python 3 和 Python 2部分不兼容


First program:

In Python 2:
>>> print "Hello, World!"

In Python 3:
>>> print("Hello, World!");


Values and types:
>>> type('Hello')
<type 'str'>
>>> type(17.2)
<type 'float'>

basic type:
string - str
integer - int
float
boolean - bool
complex

boolean:
True, False

list
tuple


An assignment statement creates new variables and gives them values:
>>> message = 'hello'
>>> n =17
>>> pi = 3.14


Python 2 has 31 keywords:
and     del     from        not     while
as      elif    global      or      with
assert  else    if          pass    yield
break   except  import      print
class   exec    in          raise
continue        finally     is      return
def     for     lambda      try

In Python 3, exec is no longer a keyword, but nonlocal is.


In Python 2:
>>> 2 / 3
0

In Python 3:
>>> 2 / 3
0.6666666666666666

operators: +, -, *, /, %, **(exponentiation)

若参与运算的两个对象的类型不同，按照以下规则进行自动类型转换：
bool -> int -> float -> complex

comments:
#
"""
	...
"""


The value None is not the same as the string 'None'. It is a special value that
has its own type:
>>> print type(None)
<type 'NoneType'>

--------------------------------------------------------------------------------

Build-in function:
>>> type()
>>> int()
>>> float()
>>> str()
>>> len()
...


Method:
>>> str.upper()
>>> str.isupper()
>>> str.find()


Type conversion functions:
>>> int('32')
32
>>> int('hello')
ValueError: invalid literal for int(): Hello

>>> float(32)
32.0
>>> float('3.14159')
3.14159

>>> str(32)
'32'
>>> str(3.14)
'3.14'

--------------------------------------------------------------------------------

A module is a file that contains a collection of related functions.
Before we can use the module, we have to import it:
>>> import math


Python provides two ways to import modules.
>>> import math
>>> print math.pi
If you import math, you get a module object named math.

You can import an object from a module like this:
>>> from math import pi
>>> print pi

Or you can use the star operator to import everything from the module:
>>> from math import *
>>> print pi


查看模块内容
dir(math)
查看帮助
help(math.sin)


--------------------------------------------------------------------------------

A function definition specifies the name of a new function and the
sequence of statements that execute when the function is called.

def print_lyrics():
    print "I'm a lumberjack, and I'm okay."
    print "I sleep all night and I work all day."

def print_twice(bruce):
    print bruce
    print bruce
    return  XXX


When you create a variable outside of any function, it belongs to __main__.

Variables in __main__ are sometimes called global because they
can be accessed from any function. Unlike local variables, which disappear when their
function ends, global variables persist from one function call to the next.


To reassign a global variable inside a function you have to declare the global
variable before you use it:

been_called = False
def example2():
	global been_called
	been_called = True


--------------------------------------------------------------------------------

Chapter 4

Python 2 install Tkinter(Fedora):
# yum install ScientificPython-tk

and use:
>>> import Tkinter

Install Pip:
yum install python-pip

Install swampy:
pip install swampy

pip install package --upgrade
pip uninstall package

Python3:
# yum install python3-tkinter

>>> import tkinter

--------------------------------------------------------------------------------

for Statement:

for i in range(n):
    # do something

Such as:
for i in range(4):
    print 'Hello!'

-------------------------

if Statement:
if x > 0:
    print '...'

if x < 0:
    pass    # pass means do nothing
    
if (x % 2) == 0:
    print '...'
else:
    print '...'

if x < y:
    print '...'
elif x > y:
    print '...'
else:
    print '...'
    
-------------------

while Statement:

while n > 0:
    print n
    n = n - 1

while True:
    line = raw_input('> ')
    if line == 'done':
        break
    print line

--------------------------------------------------------------------------------

True and False are special values that belong to the type bool; they are not
strings.


Keyboard input:

Python 2 provides a built-in function called 'raw_input' that gets input from
the keyboard. 

>>> text = raw_input()

In Python 3, it is called 'input':

>>> text = input()

raw_input can take a prompt as an argument:
>>> name = raw_input('What...is your name?\n')

--------------------------------------------------------------------------------

String:

fruit = 'apple'
fruit[4] -> 'e'
...
fruit[0] -> 'a'
fruit[-1] -> 'e'
...
fruit[-5] -> 'a'


for char in fruit:
    print char

>>> s = 'Monty Python'
>>> print s[0:5]
Monty
>>> print s[6:12]
Python

Strings are immutable

--------------------------------------------------------------------------------

The built-in function open takes the name of the file as a parameter and
returns a file object you can use to read the file:

>>> fin = open('filename')
>>> print fin
>>> fin.readline()


--------------------------------------------------------------------------------

Lists:

Lists are mutable

[1, 2, 3]
['a', 'b', 'c']
[1, 2.0, '3', [4, 5.0, '6']]

>>> num = [1, 2, 3]

List methods:



--------------------------------------------------------------------------------



Dictionary:
You can think of a dictionary as a mapping between a set of indices (which are called keys)
and a set of values. Each key maps to a value. The association of a key and a value is called
a key-value pair or sometimes an item.

>>> eng2sp = dict()
>>> eng2sp = {'one': 'uno', 'two': 'dos', 'three': 'tres'}


Tuple:
Tuples are immutable

>>> t = 'a', 'b', 'c', 'd', 'e'
>>> t = ('a', 'b', 'c', 'd', 'e')
>>> t = tuple()

--------------------------------------------------------------------------------

Reading and writing:

>>> fout = open('file.txt', 'w')
>>> line = 'Hello, world.'
>>> fout.write(line)
>>> fout.close()

The argument of write has to be a string.


Format operatopr:
'%d' - format integer
'%g' - format float
'%s' - format string

>>> '%d' % 42
'42'
>>> 'In %d years I have spotted %g %s.' % (3, 0.1, 'camels')
'In 3 years I have spotted 0.1 camels.'

--------------------------------------------------------------------------------

The os module provides functions for working with files and directories (“os” stands for
“operating system”). os.getcwd returns the name of the current directory:
>>> import os
>>> cwd = os.getcwd()


Catching exceptions:
try:
    fin = open('bad_file')
    
    for line in fin:
        print line
    fin.close()
except:
    print 'Something went wrong.'


Database:
The module anydbm provides an interface for creating and updating database files.

>>> import anydbm
>>> db = anydbm.open('captions.db', 'c')



Pickling:
The pickle module can help. It translates almost any type of object into a string suitable
for storage in a database, and then translates strings back into objects.

pickle.dumps takes an object as a parameter and returns a string representation (dumps is
short for “dump string”):

>>> import pickle
>>> t = [1, 2, 3]
>>> pickle.dumps(t)
'(lp0\nI1\naI2\naI3\na.'

pickle.loads (“load string”) reconstitutes the object:
>>> t1 = [1, 2, 3]
>>> s = pickle.dumps(t1)
>>> t2 = pickle.loads(s)
>>> print t2
[1, 2, 3]


Pipe:
Any program that you can launch from the shell can also be launched from Python using
a pipe. A pipe is an object that represents a running program.


--------------------------------------------------------------------------------

Writing modules

--------------------------------------------------------------------------------

Classes and objects


class Point(object):
    """Represents a point in 2-D space."""

>>> blank = Point()
>>> blank.x = 3
>>> blank.y = 4
>>> print '(%g, %g)' % (blank.x, blank.y)


class Rectangle(object):
    """ """

>>> box = Rectangle()
>>> box.width = 100.0
>>> box.height = 200.0
>>> box.corner = Point()
>>> box.corner.x = 0.0
>>> box.corner.y = 0.0


class Time(object):
    """
        Represents the Time of day
        attributes: hour, minute, second
    """

>>> time = Time()















