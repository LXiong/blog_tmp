Linux使用的shell版本是[Bourne Again SHell]（简称BASH）
Linux可以使用的shell可以用cat /etc/shells来查看
Linux默认使用/bin/bash

Shell 是用户与操作系统底层（通常是内核）之间交互的中介程序，
负责将用户指令、操作传递给操作系统底层

Shell分为CLI和GUI两种
CLI：Command Line Interface
CUI: Graphical User Interface

Linux中一般默认GUI为：GNOME，默认CLI为：BASH
BASH提示符以#或$起始，#代表当前用户为root用户，$代表当前用户为普通用户

BASH会记录我们以往操作的命令，可以通过history命令查看
BASH可以通过以下方式调用历史记录以简化操作：
!!       重复前一个命令
!字符    重复前一个以指定字符开头的命令
!num     按历史记录序号执行命令
!?abc    重复之前包含abc的命令
!-n      重复n个命令之前那个命令

我们可以通过 ctrl + r 来对历史记录进行搜索查询

命令passwd可以修改当前用户的密码

命令id可以显示当前用户的信息

命令行终端是多进程多任务的终端

通过在命令后追加一个&，可以将该命令放入后台运行
如：studio.sh &

通过Ctrl + z可使某个进程暂停

通过以下命令可以管理后台作业：
jobs  显示后台作业
fg    将后台作业调到前台执行
bg    继续执行一个后台作业

-----------------------------------------------------------

Shell的变量

查看
echo $PATH
or
echo ${PATH}

自定义变量
例如:
myname=dragonite
name="dragonite's pc"
name=dragonite\'s\ name（单引号和双引号要成对出现，反斜杠可转义特殊字符）
echo $myname

要在name的内容增加"yes"
name="$name"yes
name=${name}yes

name前增加"hello "
name="hello $name"
不能使name='hello $name'

`` 反引号之内的命令会被先执行，执行出来的结果将作为外部的输入信息
ls -l `locate crontab`
（先以locate将文件名数据列出来，再以ls命令来处理）

取消变量
unset myname

查看环境变量
env
自定义变量转成环境变量
export name

set查看所有环境变量（含环境变量和自定义变量）

变量的有效范围
环境变量=全局变量
自定义变量=局部变量

键盘读取
read [-pt] variable（p接提示符，t接等待的秒数）
declare [-aixr] variable（声明变量，a将后面的变量定义为数组，i定义为整数型，x将变量
                          变成环境变量，r将变量设置成只读类型）
变量类型默认为字符串，所以
sum=1+2+3输出的结果是1+2+3
要计算结果，要这样
declare -i sum=1+2+3

数组变量类型
var[1]="small min"
var[2]="big min"
var[3]="nice min"
echo "${var[1]}, ${var[2]}, ${var[3]}"

命令别名
alias rm='rm -i'
取消别名
unalias lm

历史命令
history

命令太长的话可用'\'作转行

-----------------------------------------------------------

bash的登录与欢迎信息
/etc/issue
telnet的登录与欢迎信息
/etc/issue.net

提示消息
/etc/motd

环境变量配置文件
~/.bashrc
export PATH="$PATH:/your path1/:/your path2/..."
注销后才生效
或
source ~/.bashrc
来立即生效


bash通配符：
*          代表0个到无穷多个任意字符
?          代表一定有一个任意字符
[]         代表一定有一个在中括号内的字符（非任意字符），如[abc]代表一定有一个，可能是a、b、c中任意一个
[-]        代表在编码顺序内的所有字符，如[10-9]
[^]        反向选择，如[^abc]代表一定有一个字符，只要不是a、b、c就行

bash特殊符号：
#          注释
\          转义，将特殊字符或通配符还原成一般字符
|          管道
;          连续命令执行分隔符
~          用户主文件夹
$          变量前导符
&          作业控制，将该命令放入后台运行
!          逻辑非
>,>>       数据流重定向，输出导向
<,<<       输入导向
''         单引号不具有变量置换的功能
""         具有变量置换的功能
``         ``中的命令先执行，也可使用$()
()         为子shell的起始与结束
{}         命令块的组合

-----------------------------

数据流重定向

stdin     <,<<
stdout    >,>>
stderr    2>,2>>

混合输出  &>,&>>

标准输出 > (原有数据会覆盖)  或 >> (数据会累加)
标准输入 < 或 <<
tee (双向重定向：同时将数据流送与文件和屏幕)

cmd1; cmd2;（不考虑命令相关性的连续命令执行）
cmd1 && cmd2（cmd1执行正确就执行cmd2，cmd1执行错误则不执行cmd2）
cmd1 || cmd2（cmd1执行正确则不执行cmd2，cmd1执行错误就执行cmd2）

管道命令
la -al /etc | less
选取
cut（主要用于同一行里面的数据进行分解）
grep（解析一行文字，取得关键字）

排序命令sort
将重复的数据仅列出一个显示uniq
计算输出信息的整体数据wc

-----------------------------------------------------------

正则表达式

选取命令
grep [-acinv] [-AB] [--color=auto] '查找字符串' filename

-a: 将binary文件以text文件的方式查找数据
-c: 计算找到'查找字符'的次数
-i: 忽略大小写
-n: 输出行号
-v: 反向选择，及显示出没有'查找字符串'内容的那行
--color=auto: 找到关键字部分加上颜色

-A: 后面加数字，后续n行也列出来
-B: 后面加数字，前面n行也列出来

例1：用dmesg列出内核的信息，再以grep找出eth那行
$ dmesg | grep 'eth'

例2：承上题，要将找到的关键字显色，且加上行号
$ dmesg | grep -n --color=auto 'eth'

例3：承上，在关键字所在行的前两行与后三行也一起显示
$ dmesg | grep -n -B2 -A3 --color=auto 'eth'

-----------------------------

基础正则表达式练习

wget http://linux.vbird.org/linux_basic/0330regularex/regular_express.txt

*****************************

例题1：查找特定字符

查找'the':
grep -n 'the' regular_express.txt

反向选择（即改行没有'the'）:
grep -vn 'the' regular_express.txt

不论大小写'the':
grep -in 'the' regular_express.txt

*****************************

例题2：利用中括号[]来查找集合字符

查找test或taste（有共同的't?st'存在）:
grep -n 't[ae]st' regular_express.txt

查找'oo'字符:
grep -n 'oo' regular_express.txt

'oo'前没有'g'（用集合字符的反向选择[^]）:
grep -n '[^g]oo' regular_express.txt

'oo'前没有小写字母:
grep -n '[^a-z]oo' regular_express.txt
（大写字母[A-Z]，数字[0-9]，全部[a-zA-Z0-9]）
或者使用特殊字符:
grep -n '[^[:lower:]]oo' regular_express.txt
( PS:
[:alnum:] -- 英文大小写字母和数字，即a-zA-Z0-9
[:alpha:] -- 任何英文大下写字母
[:digit:] -- 数字
[:lower:] -- 小写字母
[:upper:] -- 大写字母
...
)

*****************************

例题3：行首与行尾字符^$

查找行首'the':
grep -n '^the' regular_express.txt

查找开头是小写字母:
grep -n '^[a-z]' regular_express.txt

查找开头不是英文字母:
grep -n '^[^a-zA-Z]' regular_express.txt

（注意：^在[]内代表反向选择，在[]外代表定位在行首）

查找行尾结束为小数点.的那一行:
grep -n '\.$' regular_express.txt
(PS: 小数点.具有其他意义。所以要用转义字符\)

查找空白行:
grep -n '^$' regular_express.txt

不显示空白行和开头为#的那一行批注:
grep -v '^$' regular_express.txt | grep -vn '^#'

*****************************

例题4：任意一个字符串.与重复字符串*

正则表达式的字符不同于通配字符
. 代表一定有一个任意字符
* 代表重复前一个字符0到无穷多次的意思

查找出g??d的字符串（即共四个字符，开头是g，结尾是d）:
grep -n 'g..d' regular_express.txt

查找至少有两个o的字符串:
grep -n 'ooo*' regular_express.txt
(注意：o*是0个o或1个以上o，oo*是一定有1个o，接着可有0个或多个o)

字符串开头与结尾都是g，但是两个g之间仅能存在至少一个o，例如
gog,goog,gooog等:
grep -n 'goo*g' regular_express.txt

找出g开头与g结尾的字符串，且两个g当中的字符可有可无，即gg,g?g :
grep -n 'g.*g' regular_express.txt
(.* 代表零个或多个任意字符)

找出任意数字的行列:
grep -n '[0-9][0-9]*' regular_express.txt
(仅用'[0-9]'也是可以的)

*****************************

例题5：限定连续RE字符范围{}

假设要找到o，且o的个数限制为n，则可用{n}，不过由于{}在shell中
有特殊意义，所以要用转义字符

查找两个o的字符串:
grep -n 'o\{2\}' regular_express.txt

查找g后面接2到5个o，然后再接一个g的字符串:
grep -n 'go\{2,5\}g' regular_express.txt

查找g后面接2个o以上的goooo...g:
grep -n 'go\{2,\}g' regular_express.txt
或
grep -n 'gooo*g' regular_express.txt

-----------------------------

sed工具

sed也是管道命令，可以分析standard input

sed [-nefr] [动作]

-n: 只有经过sed处理的那一行才会列出来

动作说明: [n1[,n2]]function
n1,n2: 一般代表选择进行动作的行数

function有以下参数:
a: 新增
c: 替换
d: 删除
i: 插入
p: 打印
s: 替换

例1：将/etc/passwd的内容列出并打印行号，同时将2~5行删除
nl /etc/passwd | sed '2,5d'

-----------------------------

承上题，在第二行后加上"drink tea?"
nl /etc/passwd | sed '2a drink tea?'

承上题，在第二行前加上"drink tea?"
nl /etc/passwd | sed '2i drink tea?'

承上题，加入两行字，如"Drink tea or ..."和"drink beer"
nl/etc/passwd | sed '2a Drink tea or ...\
drink beer'
(每一行必须以反斜杠\来进行新行的增加)

例2：将2~5行的内容替换成"No 2-5 number"
nl /etc/passwd | grep '2,5c No 2-5 number'

例3：列出5~7行
nl /etc/passwd | grep -n '5,7p'

例4：替换 's/要被替换的字符串/新的字符串/g'
/sbin/ifconfig eth0 | grep 'inet addr' | sed 's/^.*addr://g' | sed 's/Bcast.*$//g'

删除#注释和空白行
cat /etc/man.config | grep 'MAN' | sed 's/#.*$//g' | sed '/^$/d'

例5：直接修改文件
将regular_express.txt内每一行结尾为'.'的换成'!'
sed -i 's/\.$/\!/g' regular_express.txt

在regular_express.txt最后一行加上"# this is a test"
sed -i '$a # this is a test' regular_express.txt

-----------------------------

扩展正则表达式

+ : 重复一个或一个以上的前一个RE字符
egrep -n 'go+d' regular_express.txt
(o+ 代表一个以上的o)

? : 零个或一个的前一个RE字符
egrep -n 'go?d' regular_express.txt
(o? 代表空的或一个o)

| : 用或(or)的方式找出数个字符串
egrep -n 'gd|good|dog' regular_express.txt
(查找gd或good或dog)

() : 找出'组'字符串
egrep -n 'g(la|oo)d' regular_express.txt
(查找glad或good)

()+ : 多个重复组的判别
echo 'AxyzxyzxyzxyzC' | egrep -n 'A(xyz)+C'
(查找开头是A结尾是C，中间有一个以上xyz的字符串)

-----------------------------

格式化打印printf

printf '打印格式' 实际内容

数据处理工具awk（将一行数据分成数个字段来处理）

文件比较
diff
cmp

-----------------------------------------------------------

Shell Script

shell script主要用于系统管理，如果用在大量数值运算的话就有点不够好了

shell.sh必须具备rx权限

脚本文件执行方法：
1.直接命令执行
	- 绝对路径：/home/dragonite/Document/linux/script/shell.sh
	- 相对路径：工作目录在/home/dragonite/Document/linux/script/下，使用./shell.sh
	- 变量PATH：将shell.sh放在PATH目录下，如~/bin/下，直接执行shell.sh
2.以bash进程来执行：通过bash shell.sh或sh shell.sh来执行

使用直接执行的方式来执行时，其实是在子进程bash内执行的。当shell文件执行完后，
子进程nash内的所有数据便被删除。我们可利用source来执行脚本，source执行是在
父进程内执行的。

(以ubuntu为主)
最好将自己创建的可执行脚本文件放在/home/dragonite/Documents/bin下，然后添加到环境变量
sudo vim /home/dragonite/.bashrc

# my bin path
PATH=$PATH:$HOME/Documents/bin
export PATH

source ~/.bashrc

步骤：
理清任务过程 - 整理执行语句 - 完善文件结构

格式
#!/bin/bash（声明这个文件内的语法使用bash的语法）

简单例子1：
#!/bin/bash
echo "hello world"

例子2；
#!/bin/bash
name=dragonite
echo "my name is $name"

例子3：
#!/bin/bash
name=dragonite
echo "my name is ${name}'s pc"


-----------------------------

变量

1.变量基本操作
	定义 格式：name=vlaue
	引用 格式：$name, ${name}
	
2.双引号、单引号、反引号
	"" 允许引用、转义
	'' 禁止引用、转义
	`` 以命令输出进行替换，可用$()代替
	
3.常见的环境变量
	系统赋值：USER、LOGNAME、HOME、SHELL、...
	用户操作：PATH、LANG、CLASSPATH、...
	
4.其他特殊变量
	$?         前一条命令的状态值，0为正常，非0异常
	$0         脚本自身的程序名
	$1-$9      第1~9个位置参数
	$*         命令行的所有位置参数的内容
	$#         命令行的位置参数个数
	
-----------------------------

数值运算及处理

1.整数运算操作
	使用expr命令，计算表达式
		格式：expr 数值1 操作符 数值2
		
		expr 1 + 2 -> 3
		expr 1 \* 2 -> 2(*要转义)
		x=1; y=2; expr $x + $y   -> 3
		
	使用$[]表达式，算式替换（也可使用$((运算内容))）
		格式：$[数值1 操作符 数值2]
		
		echo $[1+2]   ->   3
		echo $[1*2]   ->   2
		x=1; y=2; echo $[1+2]   ->  3

2.几个数值处理技巧
	变量的递更处理：let var++, ++var; let var--, --var
		x=1; let x++; echo $x    ->  2
		x=1; let x+=2; echo $x   -> 3
	
	随机数：RANDOM
		echo $RANDOM
		生成0-9随机数：echo $[RANDOM%10]
		
	生成数字序列：seq 首数、seq 首数 尾数、seq 首数 增量 尾数
	
3.小数运算操作
	将表达式交给bc命令处理
	echo "45.67-21.05" | bc
	echo "scale=4;10/3" | bc（通过scale=n来约束小数位）

-----------------------------

字符串处理

1.子串截取操作
	路径分割：dirname命令、basename命令
		var="/etc/httpd/conf/httpd.conf"
		文件夹位置：dirname $var   ->   /etc/httpd/conf
		文件名：    basename $var  ->   httpd.conf
		
	使用expr命令：expr substr $var 起始位置 截取长度
		var=BeiDaQingNiao
		expr substr $var 4 6
		->   DaQing（编号默认是从1开始）
	
	使用${}表达式：${var:起始位置:截取长度}
		var=BeiDaQingNiao
		echo ${var:4:6}
		->   aQingN（编号从0开始）
		
		echo ${var::5}
		->   BeiDa（省略开始位置）

2.字符串替换
	使用${}表达式
	格式1：${var/old/new} （把var里第一个old替换成new）
	格式2：${var//old/new}（把var里所有old替换成new）

3.使用随机字符串
	随机设备：/dev/urandom
	MD5转换：/usr/bin/md5sum
	字符串切割：/bin/cut
	
	随机字符 -> ASCII字符：
		head -1 /dev/urandom | md5sum
	使用cut切割字符串：
		echo $var | cut -b 起始位置-结束位置（位置为首尾时可省略）

-----------------------------

条件测试

1.测试操作规范
	测试的本质：
		是一条操作命令
		根据$?返回值来判断条件是否成立
		
	操作规范：
		格式1：test条件表达式
		格式2：[ 条件表达式 ]
		
	测试操作的练习方法
		直接跟 && echo YES 判断结果:
			[ 条件表达式 ] && echo YES

2.文件状态的检测
	目录文件存在及识别：
		-e   目标是否存在（Exist）
		-d   是否为目录（Directory）
		-f   是否为文件（File）
		
	[ -f "/etc/fstab"] && echo YES
	[ -d "/etc"] && echo YES
	
	权限的检测：
		[ -x "/etc/shadow"] && echo YES
		[ -w "/etc/shadow"] && echo YES

3.整数值比较、字字符串匹配
	-eq         equal
	-ne         not equal
	-gt         greater than
	-lt         lesser than
	-ge         greater or equal
	-le         lesser or equal
	-z          为空
	-n          不为空
	
	who | wc -l
	[ $(who | wc -l) -eq 2] && echo YES
	
	[ $USER = "root" ] && echo YES
	[ $USER != "nobody" ] && echo YES
	
-----------------------------

使用if判断结构

1.程序流控制

2.单分支、双分支的if应用
	单分支if语句结构：
		if 条件
			then 命令
		fi
		
		检查目录/opt/mrepo是否存在，若不存在则创建
		#!/bin/bash
		DIR="/opt/mrepo"
		if [ ! -d $DIR ]
			then mkdir $DIR
		fi
		
	双分支if语句结构
		if 条件
			then 命令1
			else 命令2
		fi
		
		判断目标主机是否存活，显示检测结果
		#!/bin/bash
		ping -c 3 -i 0.2 -W 3 $1 &> /dev/null
		if [ $? -eq 0 ]
		then 
			echo "Host $1 is up."
		else
			echo "Host $1 is down."
		fi

3.多重分支的if应用
	if 条件1
		then 命令1
	elif 条件2
		then 命令2
	elif 条件3
		then 命令3
	...
	else
		命令n
	fi

-----------------------------

使用for循环

1.for语句结构
	for 变量名 in 取值列表
	do
		命令序列
	done
	
	依次输出
	for i in "1st" "2nd" "3rd"
	do
		echo $i
	done

	逐词输出/etc/host.conf文件
	for i in $(cat /etc/host.conf)
	do
		echo $i
	done

	检测一个IP范围的主机状态
	IP_PRE="192.168.1."
	for IP in $(seq 1 5)
	do
		ping -c 3 -i 0.2 -W 3 $[IP_PRE]$IP &> /dev/null
		if [ $? -eq 0 ]
			then echo "$[IP_PRE]$IP is up"
		else
			echo "$[IP_PRE]$IP is down"
		fi
	done
	
-----------------------------

使用case分支

1.case语句结构
	case 变量值 in
	"")
		
	"")
	
	*)
	
	esac


-----------------------------

awk文本处理工具

awk '模式 {操作}' 文件1 文件2





	


	
	