
一、磁盘管理：LVM逻辑卷

1.LVM逻辑卷基本概念
	LVM（logical volumn Manage）逻辑卷是一种动态磁盘管理技术
	逻辑卷的基本概念：
		PE(physical extend)    物理扩展（空间管理的基本单位，默认4MB；400MB的硬盘划分为100个PE）
		PV(physical volume)    物理卷（把硬盘格式化为PV）
		VG(volume group)       卷组（空间池，用来装PE）
		LV(logical volume)     逻辑卷（真正使用的空间）
		
		/dev/vg_name/lv_name
		
		(1)物理磁盘被格式化为PV，空间被分为一个个PE
		(2)不同的PV加入同一个VG，不同PV的PE全部进入VG的PE池内
		(3)LV基于PE创建，大小为PE的整数倍，组成LV的PE可能来自不同的物理磁盘
		(4)LV现在就直接可以格式化后挂载使用了
		(5)LV的扩充缩减实际上就是增加或减少组成该LV的PE数量，其过程不丢失原始数据

2.LVM逻辑卷的基本管理操作
	LVM逻辑卷的创建流程如下：
		(1)将一个磁盘或分区格式化为物理卷：pvcreate /dev/sdb /dev/sdc
		(2)将物理卷添加到一个卷组中：vgcreate linuxcast /dev/sdb /dev/sdc
		(3)基于卷组创建一个逻辑卷mylv：lvcreate -L 10G -n mylv  linuxcast
		(4)格式化逻辑卷：mkfs.ext4 /dev/linuxcast/mylv
		(5)挂载使用：mount /dev/linuxcast/mylv  /mnt

	逻辑卷查看命令：
		查看物理卷信息：
		pvdisplay
		pvs
		查看卷组信息：
		vgdisplay
		vgs
		查看逻辑卷信息：
		lvdisplay
		lvs

	删除一个逻辑卷：
		lvremove /dev/linuxcast/mylv
	删除一个卷组：
		vgremove linuxcast
	删除一个物理卷：
		pvremove /dev/sdb

3.LVM逻辑卷的拉伸与缩小
	逻辑卷可以实现动态在线拉伸，扩展一个逻辑卷的空间不需要卸载文件系统，拉伸一个逻辑卷的步骤如下：
		(1)保证卷组中有足够空闲空间：vgdisplay
		(2)扩充指定逻辑卷空间：lvextend -L +10G /dev/linuxcast/mylv
		(3)更新文件系统：resize2fs /dev/linuxcast/mylv
		(4)查看更新后的文件系统：df -h

	拉伸一个卷组：
		(1)将要添加到卷组中的磁盘格式化为物理卷：pvcreate /dev/sdd
		(2)将磁盘添加到指定卷组中：vgextend linuxcast /dev/sdd
		(3)查看扩充后大小：vgdisplay

	逻辑卷可以动态缩小，但是缩小操作必须使逻辑卷离线，也就是卸载，缩小一个逻辑卷步骤如下：
		(1)卸载该逻辑卷：umount /dev/lnuxcast/mylv
		(2)缩小文件系统：resize2fs /dev/linuxcast/mylv 10G 
		(3)缩小逻辑卷大小：lvreduce -L -5G /dev/linuxcast/mylv
		(4)查看缩小后大小：lvdisplay
		(5)挂载使用：mount /dev/linuxcast/mylv /mnt

	缩小一个卷组：
		(1)将一个磁盘移出一个卷组：vgreduce linuxcast /dev/sdd
		(2)查看缩小后卷组大小：vgdisplay

-----------------------------------------------------------

二、Linux高级权限 - ACL

1.Linux高级权限管理 - ACL
	传统的UGO权限模型无法对应复杂的权限设置需求。
	ACL（Access Control List）访问控制列表是一个Linux下的高级权限机制，可实现对文件、文件夹的灵活权限控制
	ACL允许针对不同用户、不同组对一个目标文件/文件夹进行权限设置，不受UGO模型限制。
	
	在一个文件系统上使用ACL需要在挂载文件系统的时候打开ACL功能
		mount -o acl  /dev/sdb1 /mnt
		根分区默认挂载的时候支持acl

	查看一个文件的ACL设置：
		getfacl file
	为一个文件设置指定用户的权限：
		setfacl -m u:linuxcast:rwx filename
	为一个文件设置指定组的权限：
		setfacl -m g:linuxcast:r-x filename
	删除一个ACL设置：
		setfacl -x u:linuxcast filename

-----------------------------------------------------------

三、使用RAID提升磁盘速度及冗余性

1.RAID原理基础
	现代磁盘的缺陷：IO性能弱、稳定性差

	RAID（Redundant Array of Independent Disks）磁盘冗余阵列通过将多块磁盘通过RAID机制并行工作的方式来提高磁盘的性能和冗余性

	RAID评判标准：
		速度：读写速度的提升
		磁盘使用率：多磁盘的空间使用率
		冗余性： 能够支持几块磁盘损坏而不丢失数据

	RAID分为很多种类，称之为RAID级别，现代RAID共有7类，常用RAID级别有：
		RAID 0  提高读写性能（最少使用2块磁盘）
		RAID 1  提高读取性能及冗余性（最少使用2块磁盘）
		RAID 5  提高读写性能及冗余性（最少使用3块磁盘，可接受1块硬盘损坏）
		RAID 6  提高读写性能及冗余性（最少使用4块硬盘，可接受2块硬盘损坏）

	RAID级别        速度          冗余性      磁盘利用率
	  RAID0    读写速度均有提升      0       所有磁盘之和（适合个人）
	  RAID1    读性能提升            n       一个磁盘大小
	  RAID5    读写速度均有提升      1         1 - 1/n（适合生产环境）
	  RAID6    读写速度均有提升      2         1 - 2/n（适合生产环境）
		
	软件RAID是通过操作系统功能或特定软件来实现RAID机制，会占用系统资源，稳定性受操作系统影响
	硬件RAID是通过专有RAID设备实现RAID机制，硬件RAID较为独立，稳定性、速度不受上层系统影响

2.软件RAID配置
	Linux系统中通过mdadm程序实现软件RAID功能
	mdadm支持的RAID级别有：RAID0、RAID1、RAID4、RAID5、RAID6
	mdadm可以基于多块硬盘、分区或逻辑卷创建软件RAID
	创建好的软件RAID对应/dev/mdn，n为第几个RAID
	Linux系统中RAID信息保存在/proc/mdstat中

	通过mdadm命令创建一个RAID0：
		mdadm -C /dev/md0 -a yes -l 0 -n 3 /dev/sdb /dev/sdc /dev/sdd
			-C   创建一个RAID
			-a   自动创建相应设备文件
			-l   指定RAID级别
			-n   指定磁盘数量
			-x   指定一个备份磁盘

	创建好RAID之后需要保存配置信息：
		mdadm -D --scan > /etc/mdadm.conf

	查看RAID信息：
		mdadm -D /dev/md0
		cat /proc/mdstat

	关闭一个RAID（关闭前一定要卸载）
		mdadm -S /dev/md0
		
	启用一个RAID
		mdadm -R /dev/md0

	模拟一个磁盘故障：
		mdadm /dev/md0 -f /dev/sdb

	从一个RAID中移出一个磁盘：
		mdadm /dev/md0 -r /dev/sdb

	向一个RAID中添加一个磁盘：
		mdadm /dev/md0 -a /dev/sdc

-----------------------------------------------------------

四、高级网络 - 网卡绑定、子接口

1.Linux网卡绑定、子接口
	查看网卡线缆状态：
		mii-tool eth0

	查看网卡底层信息：
		ethtool eth0      查看网卡物理特性
		ethtool -i eth0   查看网卡驱动信息 
		ethtool -S eth0   查看网卡状态统计信息

	Linux下可以通过IP别名（子接口）功能为一个物理网卡添加多个IP地址
	要使用IP别名（子接口）需要关闭NetworkManager服务：
		service NetworkManager stop
		chkconfig NetworkManager off

	使用ip命令为一个接口添加别名：
	ip addr add 192.168.1.200/24 dev eth0 label eth0:0
	eth0:0中第二个0为别名编号，第二个可命名为eth0:1

	永久添加别名，需要在/etc/sysconfig/network-scripts/中添加配置文件：
		文件名：
			ifcfg-eth0:0（要跟创建的标签一样）
		内容：
			DEVICE=eth0:0
			IPADDR=192.168.1.200
			PREFIX=24（子网掩码）
			ONPARENT=yes

	service network restart
	
	Linux下可以通过多网卡绑定来提升网卡的稳定性及速度，多网卡绑定通过将多个物理网卡绑定为一个逻辑网卡的形式创建
	绑定后物理网卡不再直接使用，IP地址配置在绑定后的逻辑网卡上。
	
	Linux支持的网卡绑定模式：
		模式0   平衡轮训（RR）      （提高带宽）
		模式1   主动备份            （提供稳定性）
		模式3   广播                （比较少用）
		
	绑定后的逻辑网卡命名为bondN，N为编号，如/dev/bond0, /dev/bond1
	
	创建绑定网卡的配置文件：
	/etc/sysconfig/network-scripts/ifcfg-bond0
	
	DEVICE=bond0
	IPADDR=192.168.1.200
	PREFIX=24（子网掩码）
	ONBOOT=yes
	BOOTPROTO=none
	USERCTL=no
	BONDING_OPTS="mode=1 million=50" 或 "mode=0 million=50"
	
	然后修改每个属于该逻辑网卡的物理网卡（一般称之为slave接口）的配置文件：
	/etc/sysconfig/network-scripts/ifcfg-eth0
	
	DEVICE=eth0
	BOOTPROTO=none
	ONBOOT=yes
	MASTER=bond0
	SLAVE=yes
	USERCTL=no
	
	然后bond网卡添加驱动支持：
	/etc/modprobe.d/bonding.conf
	
	alias bond0 bonding
	
	重启网络服务
	service network restart

-----------------------------------------------------------

五、SELinux安全系统基础

1.SELinux基础
	SELinux（Secure Enhanced Linux）安全增强的Linux是NSA针对计算机基础机构开发的一个全新的Linux安全机制

	SELinux是一个内核级安全机制，内核2.6之后集成在Linux内核中
	CentOS/RHEL默认开启SELinux
	对SELinux的修改一般要重启计算机

	SELinux定义了两个基本概念：
		域(domain)：       对进程进行限制
		上下文(context)：  对系统资源（文件、网络套接字、系统调用等）进行限制

	以下可显示文件的SELinux上下文信息：
		ls -Z
	以下可显示进程的SELinux域信息：
		ps -Z
		
	显示的信息类似：
	system_u:object_r:httpd_exec_t:s0
	(用户)   (角色)   (类型)       (MLS,MCS)
 
	SELinux通过策略规定哪些域可以访问哪些上下文（哪些进程可以访问哪些文件）
 
	SELinux有很多预置策略，我们通常不需要自定义策略，除非需要对自定义程序、服务进行SELinux保护
 
	SELinux的报错信息保存在/var/log/audit/audit.log
 
	CentOS/RHEL默认使用目标策略(targeted)

	SELinux有三种工作模式：
		enforcing    强制模式，任何违反策略的行为都会被禁止，并且产生警告信息
		permissive   允许模式，违反策略的行为不会被禁止，只产生警告信息
		disabled     关闭SELinux
 
	SELinux模式可以通过修改配置文件：/etc/sysconfig/selinux进行修改：
		SELINUX=permissive

	命令getenforce可以查看当前SELinux工作模式
	命令setenforce可以临时修改当前SELinux工作模式:
		setenforce [0/1]（0：转成permissive，1：转成enforcing）

2.SeLinux Type类型的修改

	命令restorecon可以用来恢复一个文件的默认SELinux上下文：
		restorecon -Rv /var/www
			-R    连同子目录一起修改
			-v    将过程显示到屏幕
		
	命令chcon可以用来修改一个文件的SELinux上下文：
		chcon [-R] [-t type] [-u user] [-r role] file
		
		如：将/var/www/html/index.html的类型改为httpd_sys_content_t的类型
			chcon -t httpd_sys_content_t /var/www/html/index.html
			
		我们也可拿某个文件当范例来修改文件的类型：
			chcon [-R] --reference=/etc/passwd /var/www/html/index.html
			
	默认的SELinux Type类型记录在/etc/selinux/targeted/contexts/下，我们可通过
	semange来查询和修改
		yum install policycoreutils-python
		
		semanage fcontext -l | grep '/var/www'
		
		通过此命令我们可查看每个目录的安全性环境
		
		我们也可以增加一些目录的默认安全性环境类型，比如将
		/tmp/test设置成public_content_t类型：
		semanage fcontext -a -t public_content_t "/tmp/test(/.*)?"
		
		设置完后我们可通过semanage fcontext -l | grep '/tmp/test'命令来查询
		到/tmp/test的默认值了，然后通过restorecon来恢复/tmp/test的默认值即可:
		restorecon -Rv /tmp/test*
		ll -Zd /tmp/test
		（有默认值后用restorecon来修改比较简单）
		
3.SELinux策略内的规则布尔值修订
	SELinux默认使用targeted策略，我们可通过seinfo来查询相关的规则
	
	yum install setools-console
	seinfo [-Atrub]
		-A    列出SELinux的所有信息
		-t    列出SELinux的种类（type）
		-r    列出角色（role）
		-u    列出身份（user）
		-b    列出所有规则的种类（布尔值）
		
	我们可列出与httpd有关的规则有哪些：
	seinfo -b | grep httpd
	
	可通过sesearch获取详细的规则
	sesearch [--all] [-s 主体类别] [-b 布尔值]
	
	查询与修改
	getsebool [-a]
	setsebool [-P]
	
	
4.SELinux日志文件记录所需的服务
	SELinux通过auditd和setroubleshoot来记录SELinux产生错误的信息
	
	yum install setroubleshoot setroubleshoot-server
	service auditd restart     （setroubleshoot整合到auditd服务去了）
	
	SELinux的错误信息和解决方法都会记录到/var/log/messages中
	
	查看错误信息：
	cat /var/log/messages | grep setroubleshoot
	
	例如：
	SELinux is preventing /usr/sbin/httpd from read access on the file /var/www/html/index.html. 
	For complete SELinux messages. 
	run sealert -l ae820bab-77f7-45bc-9929-d4f3d916e533
	
	其中最重要的就是sealert -l了。
	
	通过sealert -l查看相关的信息，里面会给出相应的解决办法
	
	auditd会将详细的数据写入/var/log/auditd/auditd.log中
	
	我们可通过audit2why来查找错误信息
	audit2why < /var/log/audit/audit.log
	
	SELinux错误客服办法总结：
	(1) 无法成功使用网络服务是，先检查服务和rwx权限有没有问题，
	    如果没有，把SELinux设成permissive模式
	(2) 如果服务还不能使用，则不是SELinux有问题，应该去查找其他解决办法
	(3) 如果服务能使用了，则是SELinux出现问题了，我们可通过分析
	    /var/log/messages内的信息，找到sealert -l相关的信息，按其相关
		的方法来解决
	(4) 处理完后，重新设置SELinux为enforcing模式，再次测试网络服务

-----------------------------------------------------------

六、IP Tables防火墙基础

1.netfilter及iptables基本概念
	Linux中用来实现网络数据控制功能的内核模块netfilter
	netfilter可以对网络数据进行允许、丢弃、修改操作

	netfilter支持以下数据分类方式：
		源、目标IP地址
		使用接口
		使用协议（TCP、UDP、ICMP等）
		端口号
		TCP连接状态

	netfilter基本概念：
		chain（链，也叫过滤点）：INPUT、FORWARD、OUTPUT、PREROUTING、POSTROUTING
		table表（功能）：filter（对数据进行过滤）、
		                 nat（对数据包的源、目标地址进行修改）、
						 mangle（对数据包进行高级修改）
		
		Filtering point              |            Table
		(chain)                      +----------+-------+----------
		                             |  filter  |  nat  |  mangle
		-----------------------------+----------+-------+----------
		INPUT（输入数据）            |    v     |       |     v
		FORWARD（转发的数据）        |    v     |       |     v
		OUTPUT（输出的数据）         |    v     |   v   |     v
		PREROUTING（路由前的数据）   |          |   v   |     v
		POSTROUTING（路由后的数据）  |          |   v   |     v 

	常用功能
	作为服务器使用：
		过滤本机的流量      -  INPUT链，filter表
		过滤本机发出的流量  -  OUTPUT链，filter表
	
	作为路由器使用：
		过滤转发的流量   - FORWARD链，filter表
		对转发数据的源、目标IP进行修改（NAT功能） - PREROUTING链，nat表
		
		
	用户通过iptables命令来管理netfilter模块
	iptables通过规则对数据进行访问控制
	一个规则占用一行
	规则按顺序排列
	每个数据包按规则顺序依依匹配，如果有匹配的，则立即执行该规则指定的动作（允许、丢弃）
	没有匹配规则，则使用默认动作（每个chain拥有各自的默认动作）
	
	通过iptables命令创建一个规则，一条规则包含以下几个部分：
		iptables -t filter -A INPUT -s 192.168.1.1 -j DROP
		            (表)      (链)     (匹配属性)     (动作)
	
	匹配属性：
		源、目标IP地址
		接口号
		协议（TCP、UDP、ICMP等）
		端口号
		TCP状态
		
	动作：
		ACCEPT
		DROP
		REJECT
	
2.iptables配置管理
	列出现有iptables规则：
		iptables -L

	删除所有iptables规则：
		iptables -F
	
	插入一个iptables规则：
		iptables -I INPUT 3(顺序) -p tcp --dport 80 -s 192.168.1.0/24 -j DROP

	删除一个iptables规则：
		iptables -D INPUT 3
		iptables -D INPUT -p tcp --dport 80 -s 192.168.1.0/24 -j DROP

	匹配参数
	基于IP地址：
		-s 192.168.1.1（源地址）
		-d 10.0.0.0/8（目标地址）
		
	基于接口：
		-i eth0（输入）
		-o eth1（输出）
		
	排除参数：
		-s'!' 192.168.1.0/24（取反）
		
	基于协议及端口：
		-p tcp --dport 23
		-p udp --sport 53
		-p icmp
		
	例子：
	控制本机的网络流量
	iptables -A INPUT -s 192.168.1.100 -j DROP（过滤192.168.1.100的流量）
	iptables -A INPUT -p tcp --dport 80 -j DROP（过滤来自80端口的流量）
	iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 22 -j DROP（过滤来自192.168.1.0这个网段的SSH链接）
	iptables -A INPUT -i eth0 -j ACCEPT（仅允许来自eth0接口的流量）
		
	禁止所有192.168.1.0/24到10.1.1.0/24的流量：
	iptables -A FORWARD -s 192.168.1.0/24 -d 10.1.1.0/24 -j DROP
		
	NAT(Network Address Translation)网络地址转换时用来对数据包
	的IP地址进行修改，NAT分为两种：
		- SNAT  源地址转换，通常用于伪装内部地址
		- DNAT  目标地址转换，通常用于跳转（只能用于PREROUTING）
		
	通过NAT进行跳转：
		iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-dest 192.168.1.10
		
	通过NAT对出向数据进行跳转：
		iptables -t nat -A OUTPUT -p tcp --dport 80 -j DNAT --to-dest 192.168.1.100:8080
		
	通过NAT对数据流进行伪装：（一般意义上的NAT，将内部地址全部伪装为一个外部公网IP地址）
		iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
		
	通过NAT隐藏源IP地址
		iptables -t nat -A POSTROUTING -j SNAT --to-source 1.2.3.4

	所有的规则只是临时的，要永久性的话要保存规则
	iptables规则保存在配置文件：
		/etc/sysconfig/iptables
 
	以下命令可以将当前iptables配置保存到配置文件中：
		service iptables save

-----------------------------------------------------------

七、Linux远程管理 - SSH、VNC

1.Linux远程管理 - SSH、VNC
	常见远程管理工具方式：
		- RDP(remote desktop protocol)协议，windows远程桌面管理
		- telnet，CLI界面下的远程管理，几乎所有操作系统都有（内容明文传输）
		- SSH(secure shell)，CLI界面下的远程管理，几乎所有操作系统都有（内容加密传输，默认RSA算法），
		  类UNIX系统下主要的远程管理方式（Linux，BSD，Mac）
		- RFB(remote framebuffer)，图形化远程管理协议，VNC(Virtual Network Computing)使用的协议，主要作为类UNIX系统下主要的
		  图形化远程管理方式（Linux，BSD，Mac）
		
	SSH2是现在广泛使用的ssh版本
	SSH协议使用TCP协议，端口号为22
	
	命令ssh用以以ssh协议登陆其他主机：
	ssh root@192.168.1.100
	ssh root@192.168.1.100 who
	
	第一次在两台主机之间建立SSH连接时，需要交换公钥用以进行加密
	ssh信息保存在用户家目录的.ssh隐藏文件夹下
		
		
	其它SSH命令:
	
	scp用于两台计算机间通过ssh进行快速的、加密的数据传输：
		scp 源文件 目标地址(冒号后跟绝对路径)
		scp -r 递归的进行拷贝（用以传输文件夹）
			-p 传输时保留文件权限及时间问题
			-C 传输时进行数据压缩
		(scp file dragonite@192.168.1.110:/home/dragonite/)

	rsync用于两台计算机之间通过ssh同步文件夹：
		rsync folder dragonite@192.168.1.110:/home/dragonite
		rsync命令是一种增量同步方式，只会拷贝变化的文件（修改的、新增的、删除的）
		
	
	VNC分为客户端和服务端，CentOS 6/RHEL 6中使用tigervnc作为自带的VNC程序
	yum install tigervnc-server
	
	配置文件在/etc/sysconfig/vncservers:
		VNCSERVERS="1:dragonite"
		
	创建密码:
		vncpasswd
		
	启动vnc服务
		service vncserver start
		
	添加防火墙规则
	
	VNC客户端：vnc viwer
		
		
-----------------------------------------------------------

Linux系统自动化部署


1.DHCP服务介绍

    DHCP：动态主机配置协议，通过dhcpd实施，为dhcpd和bootp ipv4，ipv6客户端提供服务。
    
    DHCP协议工作原理
    第一步：客户端请求IP地址 -- 发送一个DHCPDISCOVER广播包
    第二步：DHCP SERVER响应请求 -- 广播一个DHCPOFFER包
    第三步：客户端选择IP地址 -- 广播一个DHCPREQUEST包
    第四步：服务器确认IP租约 -- 发送一个DHCPACK包
    
    服务简介：DHCP
    
    类型：system V管理的服务
    软件名：dhcp
    守护进程：/usr/sbin/dhcpd
    脚本：/etc/init.d/dhcpd
    端口：67（bootps），68（bootpc）
    配置文件：/etc/dhcp/dhcpd.conf, /var/lib/dhcpd/dhcpd.leases
    
    配置IPv4 DHCP服务器
    第一步：安装软件包
          yum install dhcp
    第二步：获取配置文件
          cp /usr/share/doc/dhcp-version/dhcpd.conf.sample /etc/dhcp/dhcpd.conf
    第三步：按需求定义配置文件，并启动服务
          /etc/init.d/dhcpd start
          chkconfig dhcpd on
          
    DHCP配置文件模板
    #必须至少要定义一个subnet块
    subnet 192.68.0.0 netmask 255.255.255.0 {
        range 192.168.0.100 192.168.0.200;
        option domain-name-servers demo.itercase.com;
        option domain-name "itercast.com";
        option routers 192.168.0.254;
        default-lease-time 600;
        max-lease-time 7200;
    }
    #绑定IP地址
    host client1 {
        hardware ethernet aa:bb:cc:dd:ee:ff;
        #该地址必须是DHCP和BOOTP ranges之外的
        fixed-address 192.168.0.1;
    }
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
